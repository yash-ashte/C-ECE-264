        -:    0:Source:json.c
        -:    0:Graph:json.gcno
        -:    0:Data:json.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdbool.h>
        -:    4:#include <ctype.h>
        -:    5:#include <assert.h>
        -:    6:#include "clog.h"
        -:    7:#include "json.h"
        -:    8:#include <string.h>
        -:    9:
       23:   10:void _free_tree(BSTNode* root) {
       23:   11:    if (root == NULL) {
       15:   12:        return;
        -:   13:    }
        -:   14:
        8:   15:    _free_tree(root->left);
        8:   16:    _free_tree(root->right);
        8:   17:    free_element(root->element); // Free the element
        8:   18:    free(root->key);
        8:   19:    free(root);
        -:   20:}
        -:   21:
        -:   22:
       11:   23:bool parse_object(BSTNode** a_root, const char** a_pos) {
       11:   24:    if (a_root == NULL || a_pos == NULL || *a_pos == NULL) {
        2:   25:        return false;
        -:   26:    }
        -:   27:
        -:   28:    // Eat whitespace
       13:   29:    while (isspace(**a_pos)) {
        4:   30:        (*a_pos)++;
        -:   31:    }
        -:   32:
        -:   33:    // Check if it starts with '{'
        9:   34:    if (**a_pos != '{') {
        1:   35:      	 return false;
        -:   36:    }
        -:   37:
        -:   38:    // Move past the '{'
        8:   39:    (*a_pos)++;
        -:   40:
        8:   41:    *a_root = NULL;
        -:   42:
        -:   43:    // Check for an empty object '{}'
        8:   44:    if (**a_pos == '}') {
        1:   45:        (*a_pos)++; // Move past the '}'
        1:   46:        return true;
        -:   47:    }
        -:   48:	char* key;
        4:   49:    while (true) {
        -:   50:        // Parse the key as a string
        -:   51:        
       11:   52:        if (!parse_string(&key, a_pos)) {
        -:   53:	//		printf("\n%s\n", key);
        1:   54:            _free_tree(*a_root); // Free the binary search tree if an error occurs
        -:   55:	//		printf("key err");
        7:   56:            return false;
        -:   57:        }
        -:   58:
        -:   59:        // Eat whitespace after the key
       11:   60:        while (isspace(**a_pos)) {
        1:   61:            (*a_pos)++;
        -:   62:        }
        -:   63:
        -:   64:        // Check for the ':' separator
       10:   65:        if (**a_pos != ':') {
        1:   66:            free(key);
        1:   67:            _free_tree(*a_root); // Free the binary search tree if an error occurs
        -:   68:	//		printf(" :err");
        1:   69:			return false;
        -:   70:        }
        -:   71:
        9:   72:        (*a_pos)++; // Move past the ':'
        -:   73:	//	printf("pre el");
        -:   74:        // Parse the value as an element
        -:   75:        Element element;
        9:   76:        if (!parse_element(&element, a_pos)) {
        1:   77:            free(key);
        1:   78:            _free_tree(*a_root); // Free the binary search tree if an error occurs
        1:   79:            return false;
        -:   80:        }
        -:   81:	//	printf("pre tree");
        -:   82:        // Create a new node for the binary search tree
        8:   83:        BSTNode* new_node = malloc(sizeof(*new_node));
       8*:   84:        assert(new_node != NULL);
        -:   85:	//	printf("post tree");
        8:   86:        new_node->key = key;
        8:   87:        new_node->element = element;
        8:   88:        new_node->left = NULL;
        8:   89:        new_node->right = NULL;
        -:   90:
        -:   91:        // Add the node to the binary search tree
        8:   92:        if (*a_root == NULL) {
        4:   93:            *a_root = new_node;
        -:   94:        } else {
        4:   95:            BSTNode* current = *a_root;
    #####:   96:            while (true) {
        4:   97:                int cmp_result = strcmp(key, current->key);
        4:   98:                if (cmp_result == 0) {
        -:   99:                    // Key already exists, replace the value in the old node with the new element
    #####:  100:                    free_element(current->element);
    #####:  101:                    current->element = element;
    #####:  102:                    free(key); // Free the key since it's already in the tree
    #####:  103:                    free(new_node); // Free the new node since it's not used
    #####:  104:                    break;
        4:  105:                } else if (cmp_result < 0) {
        1:  106:                    if (current->left == NULL) {
        1:  107:                        current->left = new_node;
        1:  108:                        break;
        -:  109:                    } else {
    #####:  110:                        current = current->left;
        -:  111:                    }
        -:  112:                } else {
        3:  113:                    if (current->right == NULL) {
        3:  114:                        current->right = new_node;
        3:  115:                        break;
        -:  116:                    } else {
    #####:  117:                        current = current->right;
        -:  118:                    }
        -:  119:                }
        -:  120:            }
        -:  121:        }
        -:  122:
        -:  123:        // Eat whitespace
        -:  124:       /* while (isspace(**a_pos)) {
        -:  125:            (*a_pos)++;
        -:  126:        }*/
        -:  127:	//	printf("end");
        -:  128:        // Check if it's the end of the object or there's a comma separator
        8:  129:        if (**a_pos == '}') {
        3:  130:            (*a_pos)++; // Move past the '}'
        -:  131:	//		printf("true");
        3:  132:            return true;
        5:  133:        } else if (**a_pos == ',') {
        4:  134:            (*a_pos)++; // Move past the ','
        -:  135:			//key = NULL;
        -:  136:			//free(key);
        -:  137:	//		printf(" \'%c\' ", **a_pos);
        -:  138:		//	printf("loop");
        -:  139:        } else {
        1:  140:            _free_tree(*a_root);
        -:  141:	//		printf("here");
        1:  142:            return false;
        -:  143:        }
        -:  144:    }
        -:  145:}
        -:  146:
        -:  147:
       10:  148:Element* get_element(BSTNode* root, const char* key) {
       10:  149:    if (root == NULL || key == NULL) {
        2:  150:        return NULL;
        -:  151:    }
        -:  152:
        8:  153:    int cmp_result = strcmp(key, root->key);
        8:  154:    if (cmp_result == 0) {
        -:  155:        // Key found, return the address of the element in the node
        5:  156:        return &(root->element);
        3:  157:    } else if (cmp_result < 0) {
        -:  158:        // Key is smaller, search in the left subtree
        1:  159:        return get_element(root->left, key);
        -:  160:    } else {
        -:  161:        // Key is larger, search in the right subtree
        2:  162:        return get_element(root->right, key);
        -:  163:    }
        -:  164:}
        -:  165:
        -:  166:
        4:  167:bool read_json(const char* filename, Element* a_element) {
       4*:  168:	assert(filename != NULL);
       4*:  169:	assert(a_element != NULL);
        -:  170:
        -:  171:    // Open the file for reading
        4:  172:    FILE* file = fopen(filename, "r");
        4:  173:    if (file == NULL) {
        1:  174:        fprintf(stderr, "Unable to open file '%s' for reading!\n", filename);
        1:  175:        return false;
        -:  176:    }
        -:  177:
        -:  178:    // Get the file size
        3:  179:    fseek(file, 0, SEEK_END);
        3:  180:    long file_size = ftell(file);
        3:  181:    fseek(file, 0, SEEK_SET);
        -:  182:
        -:  183:    // Allocate memory to read the file
        3:  184:    char* file_contents =  malloc(sizeof(char) * (file_size + 1));
       3*:  185:    assert(file_contents != NULL);
        -:  186:      
        -:  187:
        -:  188:    // Read the file contents into the allocated memory
        3:  189:    size_t read_size = fread(file_contents, 1, file_size, file);
        3:  190:    file_contents[read_size] = '\0';
        -:  191:
        -:  192:    // Close the file
        3:  193:    fclose(file);
        -:  194:
        -:  195:    // Parse the JSON element from the file contents
        3:  196:    const char* pos = file_contents;
        3:  197:    if (!parse_element(a_element, &pos)) {
        1:  198:        fprintf(stderr, "Invalid JSON element in file '%s'!\n", filename);
        1:  199:        free(file_contents);
        1:  200:        return false;
        -:  201:    }
        -:  202:
        -:  203:    // Check for non-whitespace trailing characters
        9:  204:    while (*pos != '\0') {
        8:  205:        if (!isspace(*pos)) {
        1:  206:            fprintf(stderr, "File '%s' contains non-whitespace trailing characters!\n", filename);
        1:  207:            free_element(*a_element);
        1:  208:            free(file_contents);
        1:  209:            return false;
        -:  210:        }
        7:  211:        pos++;
        -:  212:    }
        -:  213:
        -:  214:    // Free the allocated memory for file contents
        1:  215:    free(file_contents);
        -:  216:
        1:  217:    return true;
        -:  218:}
        -:  219:
        -:  220:
        -:  221:
        3:  222:bool parse_null(char const** a_pos) {
       3*:  223:	assert(a_pos != NULL);
        -:  224:	//assert(*a_pos != NULL);
        3:  225:	const char* pos = *a_pos;
        5:  226:	while (*pos == ' ') {
        2:  227:		pos++;
        -:  228:	}
        3:  229:	if (*pos == 'n') {
        2:  230:		++pos;
        2:  231:		if (*pos == 'u') {
        2:  232:			++pos;
        2:  233:			if (*pos == 'l') {
        2:  234:				++pos;
        2:  235:				if (*pos == 'l') {
        2:  236:					++pos;
        2:  237:					*a_pos = pos;
        2:  238:					return true;	
        -:  239:				}
        -:  240:			}
        -:  241:		}
        -:  242:	}
        1:  243:	*a_pos = pos;
        1:  244:	return false;
        -:  245:}
        -:  246:
        3:  247:bool parse_bool(bool* a_value, const char** a_pos) {
        -:  248:    // Check for null pointers to avoid crashes
       3*:  249:    assert(a_value != NULL);
       3*:  250:	assert(a_pos != NULL);
       3*:  251:	assert(*a_pos != NULL);
        3:  252:    const char* pos = *a_pos;
        4:  253:    while (*pos == ' ' || *pos == '\t' || *pos == '\n' || *pos == '\r') {
        1:  254:        pos++;
        -:  255:    }
        3:  256:	if (*pos == 't') {
        2:  257:		pos++;
        2:  258:		if (*pos == 'r') {
        2:  259:			pos++;
        2:  260:			if (*pos == 'u') {
        2:  261:				pos++;
        2:  262:				if (*pos == 'e') {
        1:  263:					pos++;
        1:  264:					*a_pos = pos;
        1:  265:					*a_value = true;
        1:  266:					return true;
        -:  267:					
        -:  268:				}
        -:  269:			}
        -:  270:		}
        1:  271:	}  else if (*pos == 'f') {
        1:  272:		pos++;
        1:  273:		if (*pos == 'a') {
        1:  274:			pos++;
        1:  275:			if (*pos == 'l') {
        1:  276:				pos++;
        1:  277:				if (*pos == 's') {
        1:  278:					pos++;
        1:  279:					if (*pos == 'e') {
        1:  280:						pos++;
        1:  281:						*a_pos = pos;
        1:  282:						*a_value = false;
        1:  283:						return true;
        -:  284:						
        -:  285:					}
        -:  286:				}
        -:  287:			}
        -:  288:		}
        -:  289:	}
        -:  290:	 // If not a valid boolean literal, return false
        1:  291:	*a_pos = pos;
        1:  292:    return false;
        -:  293:}
        -:  294:
        -:  295:
        -:  296:
       10:  297:void _free_list(Node* head) {
       31:  298:    while (head != NULL) {
       21:  299:        Node* temp = head->next;
       21:  300:        free_element(head->element); // Free the element
       21:  301:        free(head);
       21:  302:        head = temp;
        -:  303:    }
       10:  304:}
        -:  305:
        -:  306:
       12:  307:bool parse_list(Node** a_head, const char** a_pos) {
        -:  308:/*if (a_head == NULL || a_pos == NULL || *a_pos == NULL) {
        -:  309:        return false;
        -:  310:    }	*/
        -:  311: /*   const char* pos = *a_pos;
        -:  312:
        -:  313:    while (isspace(*pos)) {
        -:  314:        pos++;
        -:  315:    }
        -:  316:    if (*pos != '[') {
        -:  317:		*a_pos = pos;
        -:  318:        return false;
        -:  319:    }
        -:  320:
        -:  321:    pos++;
        -:  322:
        -:  323:    *a_head = NULL;
        -:  324:    while (*pos != ']') {
        -:  325:        while (isspace(*pos) || *pos == ',') {
        -:  326:            pos++;
        -:  327:        }
        -:  328:        if (*pos == ']') {
        -:  329:            break;
        -:  330:        }
        -:  331:        Element element;
        -:  332:        if (!parse_element(&element, &pos)) {
        -:  333:
        -:  334:            _free_list(*a_head);
        -:  335:            *a_head = NULL;
        -:  336:			*a_pos = pos;
        -:  337:            return false;
        -:  338:        }
        -:  339:
        -:  340:
        -:  341:        Node* new_node = malloc(sizeof(*new_node));
        -:  342:        assert(new_node != NULL);
        -:  343:
        -:  344:        new_node->element = element;
        -:  345:        new_node->next = NULL;
        -:  346:
        -:  347:        // Update the linked list
        -:  348:        if (*a_head == NULL) {
        -:  349:            *a_head = new_node;
        -:  350:        } else {
        -:  351:            Node* tail = *a_head;
        -:  352:            while (tail->next != NULL) {
        -:  353:                tail = tail->next;
        -:  354:            }
        -:  355:            tail->next = new_node;
        -:  356:        }
        -:  357:    }
        -:  358:
        -:  359:    // Move to the next character after ']'
        -:  360:    pos++;
        -:  361:
        -:  362:    // Update the position pointer
        -:  363:    *a_pos = pos;
        -:  364:
        -:  365:    return true;*/
        -:  366:
        -:  367:/*if (a_head == NULL || a_pos == NULL || *a_pos == NULL) {
        -:  368:        return false;
        -:  369:    }*/
        -:  370:
        -:  371:    // Eat whitespace
       15:  372:    while (isspace(**a_pos)) {
        3:  373:        (*a_pos)++;
        -:  374:    }
        -:  375:
        -:  376:    // Check if it starts with '['
       12:  377:    if (**a_pos != '[') {
        1:  378:        return false;
        -:  379:    }
        -:  380:
        -:  381:    // Move past the '['
       11:  382:    (*a_pos)++;
        -:  383:
       11:  384:    *a_head = NULL;
       11:  385:    Node* current = NULL;
        -:  386:	
       11:  387:	if (**a_pos == ']') {
        1:  388:        (*a_pos)++; // Move past the ']'
        1:  389:        return true;
        -:  390:    }
        -:  391:
       14:  392:    while (true) {
        -:  393:        // Parse the element
        -:  394:		Element element;
       24:  395:        if (!parse_element(&element, a_pos)) {
        3:  396:            if (current != NULL) {
        3:  397:                _free_list(*a_head); // Free the list if an error occurs
        -:  398:            }
       10:  399:            return false;
        -:  400:        }
        -:  401:
        -:  402:        // Create a new node for the linked list
       21:  403:        Node* new_node = (Node*)malloc(sizeof(Node));
      21*:  404:        assert(new_node != NULL);
        -:  405:
       21:  406:        new_node->element = element;
       21:  407:        new_node->next = NULL;
        -:  408:
        -:  409:        // Add the node to the linked list
       21:  410:        if (current == NULL) {
       10:  411:            *a_head = new_node;
       10:  412:            current = new_node;
        -:  413:        } else {
       11:  414:            current->next = new_node;
       11:  415:            current = current->next;
        -:  416:        }
        -:  417:
        -:  418:        // Eat whitespace
       23:  419:        while (isspace(**a_pos)) {
        2:  420:            (*a_pos)++;
        -:  421:        }
        -:  422:
        -:  423:        // Check if it's the end of the list or there's a comma separator
       21:  424:        if (**a_pos == ']') {
        6:  425:            (*a_pos)++; // Move past the ']'
        6:  426:            return true;
       15:  427:        } else if (**a_pos == ',') {
       14:  428:            (*a_pos)++; // Move past the ','
        -:  429:        } else {
        1:  430:            _free_list(*a_head);
        1:  431:            return false;
        -:  432:        }
        -:  433:    }
        -:  434:}
        -:  435:
       26:  436:bool parse_int(int* a_value, const char** a_pos) {
        -:  437:    // Check for null pointers to avoid crashes
      26*:  438:	assert(a_value != NULL);
      26*:  439:	assert(a_pos != NULL);
      26*:  440:	assert(*a_pos != NULL);
        -:  441:
       26:  442:    const char* pos = *a_pos;
       26:  443:    bool is_negative = false;
        -:  444:
        -:  445:    // Skip any leading whitespace
       28:  446:    while (*pos == ' ' || *pos == '\t' || *pos == '\n' || *pos == '\r') {
        2:  447:        pos++;
        -:  448:    }
        -:  449:
        -:  450:    // Check if the number is negative
       26:  451:    if (*pos == '-') {
        6:  452:        is_negative = true;
        6:  453:        pos++;
        -:  454:    }
        -:  455:
        -:  456:    // Check if there is at least one digit after the optional sign
       26:  457:    if (!isdigit(*pos)) {
        3:  458:		*a_pos = pos;
        3:  459:        return false;
        -:  460:    }
        -:  461:
       23:  462:    int value = 0;
       74:  463:    while (isdigit(*pos)) {
        -:  464:        // Convert the character to an integer and update the value
       51:  465:        value = value * 10 + (*pos - '0');
       51:  466:        pos++;
        -:  467:    }
        -:  468:
        -:  469:    // Apply the sign if the number is negative
       23:  470:    if (is_negative) {
        3:  471:        value = -value;
        -:  472:    }
        -:  473:
        -:  474:    // Set the output value and update the position pointer
       23:  475:    *a_value = value;
       23:  476:    *a_pos = pos;
        -:  477:
       23:  478:    return true;
        -:  479:}
        -:  480:
        -:  481:
       21:  482:bool parse_string(char** a_string, const char** a_pos) {
      21*:  483:	assert(a_string != NULL);
      21*:  484:	assert(a_pos != NULL);
       25:  485:	while (**a_pos == ' ' || **a_pos == '\t' || **a_pos == '\n' || **a_pos == '\r') {
        4:  486:        (*a_pos)++;
        -:  487:    }
        -:  488:
       21:  489:    if (**a_pos != '"') {
        1:  490:		printf(" \" err");
        1:  491:        return false;
        -:  492:    } 
       20:  493:	(*a_pos)++;
        -:  494:
        -:  495:
       20:  496:    const char* end_pos = *a_pos;
      112:  497:    while (*end_pos != '"' && *end_pos != '\0' && *end_pos != '\n') {
       92:  498:        end_pos++;
        -:  499:    }
       20:  500:   if (*end_pos != '"') {
        -:  501:
        2:  502:		*a_pos = end_pos;
        -:  503:	//	printf(" end \" err");
        2:  504:       return false;
        -:  505:	}
        -:  506:
       18:  507:    size_t length = end_pos - *a_pos;
        -:  508:
       18:  509:    *a_string = malloc((length + 1) * sizeof(char));
      18*:  510:    assert(*a_string != NULL);
       96:  511:    for (size_t i = 0; i < length; i++) {
       78:  512:        (*a_string)[i] = (*a_pos)[i];
        -:  513:    }
       18:  514:    (*a_string)[length] = '\0';
        -:  515:
       18:  516:    *a_pos = end_pos + 1;
       18:  517:    return true;
        -:  518:}
        -:  519:
        -:  520:
        -:  521:
        -:  522:
       51:  523:bool parse_element(Element* a_element, char const** a_pos) {
        -:  524:    // Eat whitespace
      51*:  525:	assert(a_element != NULL);
      51*:  526:	assert(a_pos != NULL);
       77:  527:    while (isspace(**a_pos)) {
       26:  528:        (*a_pos)++;
        -:  529:    }
        -:  530:
        -:  531:    // Check the type of the element based on the next character
       51:  532:    if (isdigit(**a_pos) || **a_pos == '-') {
       21:  533:        a_element->type = ELEMENT_INT;
       21:  534:        return parse_int(&(a_element->as_int), a_pos);
       30:  535:    } else if (**a_pos == '"') {
        9:  536:        a_element->type = ELEMENT_STRING;
        9:  537:        return parse_string(&(a_element->as_string), a_pos);
       21:  538:    } else if (**a_pos == '[') {
        9:  539:        a_element->type = ELEMENT_LIST;
        9:  540:	    return parse_list(&(a_element->as_list), a_pos);
       12:  541:    } else if (**a_pos == 't' || **a_pos == 'f') {
        2:  542:		a_element->type = ELEMENT_BOOL;
        2:  543:		return parse_bool(&(a_element->as_bool), a_pos);
       10:  544:	} else if (**a_pos == 'n') {
        2:  545:		a_element->type = ELEMENT_NULL;
        2:  546:		return parse_null(a_pos);
        8:  547:	} else if (**a_pos == '{') {
        1:  548:		a_element->type = ELEMENT_OBJECT;
        1:  549:		return parse_object(&(a_element->as_object), a_pos);
        -:  550:	}
        -:  551:	
        -:  552:
        7:  553:    return false;
        -:  554:}
        -:  555:
        7:  556:void _print_list(Node* head, FILE* file) {
        7:  557:    Node* current = head;
       22:  558:    while (current != NULL) {
       15:  559:        print_element_to_file(current->element, file);
       15:  560:        if (current->next != NULL) {
        9:  561:            fprintf(file, ", ");
        -:  562:        }
       15:  563:        current = current->next;
        -:  564:    }
        7:  565:}
        -:  566:
       28:  567:void print_element_to_file(Element element, FILE* file) {
      28*:  568:	assert(file != NULL);
       28:  569:	switch (element.type) {
       11:  570:        case ELEMENT_INT:
       11:  571:            fprintf(file, "%d", element.as_int);
       11:  572:            break;
        6:  573:		case ELEMENT_STRING:
        6:  574:            fprintf(file, "\"%s\"", element.as_string);
        6:  575:            break;
        7:  576:        case ELEMENT_LIST:
        7:  577:            fprintf(file,"[");
        7:  578:            _print_list(element.as_list, file);
        7:  579:            fprintf(file, "]");
        7:  580:            break;
        2:  581:		case ELEMENT_BOOL:
        2:  582:			if (element.as_bool == 1) {
        1:  583:				fprintf(file, "true");
        -:  584:			}
        1:  585:			else if (element.as_bool == 0) {
        1:  586:				fprintf(file, "false");
        -:  587:			}
        2:  588:			break;
        1:  589:		case ELEMENT_NULL:
        1:  590:			fprintf(file, "null");
        1:  591:			break;
        1:  592:		case ELEMENT_OBJECT:
        1:  593:			fprintf(file, "{");
        1:  594:            const BSTNode* node = element.as_object;
        1:  595:            bool first = true;
        3:  596:            while (node != NULL) {
        2:  597:                if (!first) {
        1:  598:                    fprintf(file, ", ");
        -:  599:                }
        2:  600:                fprintf(file, "\"%s\": ", node->key);
        2:  601:                print_element_to_file((node->element), file);
        2:  602:                node = node->right;
        2:  603:                first = false;
        -:  604:            }
        1:  605:            fprintf(file, "}");
        1:  606:            break;
        -:  607:    }
       28:  608:}
        -:  609:
        1:  610:void write_json(const char* filename, Element element) {
       1*:  611:	assert(filename != NULL);
        1:  612:    FILE* file = fopen(filename, "w");
       1*:  613:    assert(file != NULL);
        1:  614:    print_element_to_file(element, file);
        1:  615:    fclose(file);
        1:  616:	file = NULL;
        1:  617:}
        -:  618:
       10:  619:void print_element(Element element) {
       10:  620:	print_element_to_file(element, stdout);
       10:  621:}
        -:  622:
       41:  623:void free_element(Element element) {
        -:  624:    // Free the contents of the Element based on its type
       41:  625:    switch (element.type) {
       20:  626:        case ELEMENT_INT:
        -:  627:            // Nothing to free for an integer
       20:  628:            break;
        8:  629:        case ELEMENT_STRING:
        -:  630:            // Free the string if it exists
        8:  631:            if (element.as_string != NULL) {
        8:  632:                free(element.as_string);
        -:  633:            }
        8:  634:            break;
        7:  635:        case ELEMENT_LIST:
        7:  636:				if (element.as_list != NULL) {
        6:  637:					_free_list(element.as_list);
        -:  638:				}
        -:  639:  //          }
        7:  640:            break;
        1:  641:		case ELEMENT_NULL:
        -:  642:            // Nothing to free for null
        1:  643:            break;
        2:  644:        case ELEMENT_BOOL:
        -:  645:            // Nothing to free for a boolean
        2:  646:            break;
        3:  647:        case ELEMENT_OBJECT:
        -:  648:            // Free the binary search tree
        3:  649:            if (element.as_object != NULL) {
        3:  650:                _free_tree(element.as_object);
        -:  651:            }
        3:  652:            break;
        -:  653:    }
       41:  654:}
        -:  655:
