Starting program: /home/shay/a/yashteka/264/hw04/prime_factor 

Program received signal SIGINT, Interrupt.
0x00007ffff7afcba0 in __write_nocancel ()
   from /lib64/libc.so.6
#0  0x00007ffff7afcba0 in __write_nocancel ()
   from /lib64/libc.so.6
#1  0x00007ffff7a872f3 in _IO_file_write@@GLIBC_2.2.5 ()
   from /lib64/libc.so.6
#2  0x00007ffff7a88b0e in __GI__IO_do_write ()
   from /lib64/libc.so.6
#3  0x00007ffff7a87a50 in __GI__IO_file_xsputn ()
   from /lib64/libc.so.6
#4  0x00007ffff7a57ec5 in vfprintf () from /lib64/libc.so.6
#5  0x00007ffff7a604e9 in printf () from /lib64/libc.so.6
#6  0x0000000000400637 in print_prime_factors (n=0)
    at prime_factor.c:29
#7  0x00000000004006d6 in main (argc=1, argv=0x7fffffffdb28)
    at test_prime_factor.c:7
#6  0x0000000000400637 in print_prime_factors (n=0)
    at prime_factor.c:29
29	                printf(" %d", 2);
24	            printf(" (none)");
25	        }
26	        else {
27	            // Print all occurrences of 2 in the prime factorization
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
31	            }
32	
33	            // Try all odd integers, from 3 to sqrt(n)
No locals.
n = 0
Breakpoint 1 at 0x4006cc: file test_prime_factor.c, line 7.
Starting program: /home/shay/a/yashteka/264/hw04/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffdb28)
    at test_prime_factor.c:7
7		print_prime_factors(6);
print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
12	|*           This is about finding bugs.             *|
13	|*                                                   *|
14	\*****************************************************/
15	
16	void print_prime_factors(int n) {
17	    if(n <= 0) {
18	        printf("Only positive numbers are supported.\n");
19	    }
20	    else {
21	        printf("Prime factors of %d:", n);
22	
23	        if(n == 1) {
24	            printf(" (none)");
25	        }
26	        else {
27	            // Print all occurrences of 2 in the prime factorization
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
31	            }
Breakpoint 2 at 0x400648: file prime_factor.c, line 28.
Continuing.

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
$1 = 6
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
$2 = 6

Breakpoint 2, print_prime_factors (n=0) at prime_factor.c:28
28	            while(n % 2 == 0) {
$3 = 0
